# -*- coding: utf-8 -*-
"""PPGScalogram.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iiL6YjPOUTXdTHYBxjEF2cvxqtKvx9Fv
"""

import numpy as np
import matplotlib.pyplot as plt
import pywt

# Create a sample signal with multiple segments
t = np.linspace(0, 5, 1000)
signal = np.zeros_like(t)

# Define segment start and end times
segment_starts = [0.1,0.3,0.5, 0.8, 1.2,1.5,1.8,2.2, 2.8,3.0,3.3,3.5,3.7,4.0,4.4,4.5,4.9]
segment_ends = [0.4,0.8,1.0, 0.9, 1.4, 1.8,2.2,2.5,3.0,3.3,3.6,3.7,3.9,4.2,4.6,4.8,5.0]

# Generate different segments of the signal
for start, end in zip(segment_starts, segment_ends):
    mask = (t >= start) & (t <= end)
    signal[mask] = np.random.randn(np.sum(mask))

# Define the wavelet and scales for scalogram
wavelet = 'morl'
scales = np.arange(1, 101)

# Create an array to store scalogram coefficients
coeffs = np.zeros((len(scales), len(t)))

# Calculate the continuous wavelet transform for each segment
for start, end in zip(segment_starts, segment_ends):
    segment_signal = signal[(t >= start) & (t <= end)]
    segment_coeffs, _ = pywt.cwt(segment_signal, scales, wavelet)
    coeffs[:, (t >= start) & (t <= end)] = segment_coeffs

# Create a 2D scalogram
plt.figure(figsize=(12, 6))
plt.imshow(np.abs(coeffs), extent=[0, max(t), min(scales), max(scales)],
           cmap='inferno', aspect='auto', interpolation='bilinear')
plt.colorbar(label='Wavelet Coefficient Magnitude')
plt.title('2D Scalogram of Segmented Signal')
plt.xlabel('Time')
plt.ylabel('Scale (Frequency)')
plt.gca().invert_yaxis()
plt.show()